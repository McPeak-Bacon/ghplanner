import { NextRequest, NextResponse } from 'next/server';
import { connectToDatabase } from '@/lib/mongodb';
import { getServerSession } from 'next-auth';
import { authOptions } from '@/lib/auth';
import type { Company, Membership } from '@/lib/types';

function slugify(name: string) {
  return name.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/(^-|-$)/g, '');
}

function randomCode(len = 8) {
  const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
  let s = '';
  for (let i = 0; i < len; i++) s += chars[Math.floor(Math.random() * chars.length)];
  return s;
}

export async function GET() {
  const session = await getServerSession(authOptions as any);
  const s = session as any;
  if (!s || !s.user || !s.userId) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  const userId = s.userId as string;
  const db = await connectToDatabase();
  const memberships = await db.collection<Membership>('memberships').find({ userId, status: 'active' }).toArray();
  const companyIds = memberships.map(m => m.companyId);
  const companies = await db.collection<Company>('companies').find({ id: { $in: companyIds } }).toArray();
  return NextResponse.json({ companies: companies.map(c => ({ id: c.id, name: c.name, inviteCode: c.inviteCode })) });
}

export async function POST(request: NextRequest) {
  const session = await getServerSession(authOptions as any);
  const s = session as any;
  if (!s || !s.user || !s.userId) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }
  const userId = s.userId as string;
  const db = await connectToDatabase();
  const body = await request.json();
  const { name } = body;
  if (!name || typeof name !== 'string') {
    return NextResponse.json({ error: 'Name required' }, { status: 400 });
  }
  const now = new Date();
  const company: Company = {
    id: crypto.randomUUID(),
    name: name.trim(),
    slug: slugify(name),
    ownerUserId: userId,
    inviteCode: randomCode(8),
    inviteLinkSalt: crypto.randomUUID(),
    domainAllowlist: [],
    createdAt: now,
    updatedAt: now,
  };
  await db.collection<Company>('companies').insertOne(company as any);
  const membership: Membership = {
    id: crypto.randomUUID(),
    userId,
    companyId: company.id,
    role: 'owner',
    status: 'active',
    createdAt: now,
  };
  await db.collection<Membership>('memberships').insertOne(membership as any);
  return NextResponse.json({ id: company.id, name: company.name, inviteCode: company.inviteCode });
}
